
quarkus.http.port=8080

#quarkus.smallrye-jwt.blocking-authentication=true

## JWT
quarkus.http.auth.proactive=false
mp.jwt.verify.publickey=${JWT-PUBLIC-KEY}
mp.jwt.verify.issuer=SPID
smallrye.jwt.verify.key-format=JWK_BASE64URL

smallrye.jwt.claims.groups=USER
smallrye.jwt.path.sub=name

## OPEN API ##
uarkus.smallrye-openapi.info-title=User API
%dev.quarkus.smallrye-openapi.info-title=User API (development)
%uat.quarkus.smallrye-openapi.info-title=User API (test)
quarkus.smallrye-openapi.info-version=1.0.0

## KAFKA ##
kafka.bootstrap.servers=${KAFKA_BROKER:http://localhost:9092}
kafka.security.protocol=${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
kafka.sasl.mechanism=${KAFKA_SASL_MECHANISM:PLAIN}
mp.messaging.outgoing.sc-users.connector=smallrye-kafka
mp.messaging.outgoing.sc-users.topic=${KAFKA_USER_TOPIC:user}
mp.messaging.outgoing.sc-users.sasl.jaas.config=${KAFKA_USERS_SELFCARE_WO_SASL_JAAS_CONFIG:test}

## Orders topic (WRITE)
mp.messaging.outgoing.sc-users.type=io.smallrye.reactive.messaging.kafka.Kafka
mp.messaging.outgoing.sc-users.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.sc-users.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.sc-users.acks=1

quarkus.log.level=INFO
quarkus.http.limits.max-form-attribute-size=4096

quarkus.mongodb.connection-string = ${MONGODB-CONNECTION-STRING}
quarkus.mongodb.database = selcUser

#quarkus.native.resources.includes=publicKey.pem

## AZURE STORAGE ##

user-ms.blob-storage.container-product=${STORAGE_CONTAINER_PRODUCT:selc-d-product}
user-ms.blob-storage.filepath-product = products.json
user-ms.blob-storage.connection-string-product = ${BLOB-STORAGE-PRODUCT-CONNECTION-STRING:UseDevelopmentStorage=true;}

user-ms.blob-storage.container-templates=${STORAGE_CONTAINER_TEMPLATES:$web}
user-ms.blob-storage.filepath-templates=resources/templates/email/
user-ms.blob-storage.connection-string-templates=${BLOB-STORAGE-PRODUCT-CONNECTION-STRING:UseDevelopmentStorage=true;}

## SIGNATURE

## Rest Client
%local.quarkus.rest-client.logging.scope=request-response
%local.quarkus.rest-client.logging.body-limit=200

quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG
quarkus.openapi-generator.codegen.spec.user_registry_json.mutiny=true
quarkus.openapi-generator.codegen.spec.user_registry_json.additional-model-type-annotations=@lombok.Builder; @lombok.NoArgsConstructor; @lombok.AllArgsConstructor
quarkus.openapi-generator.user_registry_json.auth.api_key.api-key = ${USER-REGISTRY-API-KEY:example-api-key}
quarkus.rest-client."org.openapi.quarkus.user_registry_json.api.UserApi".url=${USER_REGISTRY_URL:http://localhost:8080}

quarkus.openapi-generator.codegen.spec.notification_manager_json.mutiny=true
quarkus.openapi-generator.codegen.spec.notification_manager_json.additional-model-type-annotations=@lombok.Builder; @lombok.NoArgsConstructor; @lombok.AllArgsConstructor
quarkus.openapi-generator.codegen.spec.notification_manager_json.enable-security-generation=false
quarkus.openapi-generator.codegen.spec.notification_manager_json.additional-api-type-annotations=@org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders(it.pagopa.selfcare.user.client.auth.AuthenticationPropagationHeadersFactory.class)
quarkus.rest-client."org.openapi.quarkus.notification_manager_json.api.NotificationManager".url=${MS_NOTIFICATION_MANAGER_URL:http://localhost:8080/}

## Jacoco
quarkus.jacoco.includes=it/pagopa/selfcare/user/controller/*,it/pagopa/selfcare/user/service/**,it/pagopa/selfcare/user/util/**
quarkus.jacoco.data-file=target/jacoco.exec