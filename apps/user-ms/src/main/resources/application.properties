
quarkus.http.port=8080

#quarkus.smallrye-jwt.blocking-authentication=true

## JWT
quarkus.http.auth.proactive=false
mp.jwt.verify.publickey=${JWT-PUBLIC-KEY}
mp.jwt.verify.issuer=SPID
#smallrye.jwt.verify.key-format=JWK_BASE64URL

smallrye.jwt.claims.groups=USER
smallrye.jwt.path.sub=name

## OPEN API ##
uarkus.smallrye-openapi.info-title=User API
%dev.quarkus.smallrye-openapi.info-title=User API (development)
%uat.quarkus.smallrye-openapi.info-title=User API (test)
quarkus.smallrye-openapi.info-version=1.0.0

## KAFKA ##
kafka.bootstrap.servers=${KAFKA_BROKER:http://localhost:9092}
kafka.security.protocol=${KAFKA_SECURITY_PROTOCOL:SASL_SSL}
kafka.sasl.mechanism=${KAFKA_SASL_MECHANISM:PLAIN}
mp.messaging.outgoing.sc-users.connector=smallrye-kafka
mp.messaging.outgoing.sc-users.topic=${KAFKA_USER_TOPIC:user}
mp.messaging.outgoing.sc-users.sasl.jaas.config=${EVENTHUB-SC-USERS-SELFCARE-WO-CONNECTION-STRING-LC:test}

## Orders topic (WRITE)
mp.messaging.outgoing.sc-users.type=io.smallrye.reactive.messaging.kafka.Kafka
mp.messaging.outgoing.sc-users.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.sc-users.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.sc-users.acks=1

quarkus.log.level=INFO
quarkus.http.limits.max-form-attribute-size=4096

quarkus.mongodb.connection-string = ${MONGODB-CONNECTION-STRING}
quarkus.mongodb.database = selcUser

#quarkus.native.resources.includes=publicKey.pem

## AZURE STORAGE ##

user-ms.blob-storage.container-product=${STORAGE_CONTAINER_PRODUCT:selc-d-product}
user-ms.blob-storage.filepath-product = products.json
user-ms.blob-storage.connection-string-product = ${BLOB-STORAGE-PRODUCT-CONNECTION-STRING:UseDevelopmentStorage=true;}

user-ms.blob-storage.container-templates=${STORAGE_CONTAINER_TEMPLATES:$web}
user-ms.blob-storage.filepath-templates=resources/templates/email/
user-ms.blob-storage.connection-string-templates=${BLOB-STORAGE-PRODUCT-CONNECTION-STRING:UseDevelopmentStorage=true;}

## SIGNATURE

## Rest Client
%local.quarkus.rest-client.logging.scope=request-response
%local.quarkus.rest-client.logging.body-limit=200

quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG
quarkus.openapi-generator.codegen.spec.user_registry_json.mutiny=true
quarkus.openapi-generator.codegen.spec.user_registry_json.additional-model-type-annotations=@lombok.Builder; @lombok.NoArgsConstructor; @lombok.AllArgsConstructor
quarkus.openapi-generator.user_registry_json.auth.api_key.api-key = ${USER-REGISTRY-API-KEY:example-api-key}
quarkus.rest-client."org.openapi.quarkus.user_registry_json.api.UserApi".url=${USER_REGISTRY_URL:http://localhost:8080}

## Jacoco
quarkus.jacoco.includes=it/pagopa/selfcare/user/controller/*,it/pagopa/selfcare/user/service/**,it/pagopa/selfcare/user/util/**
quarkus.jacoco.data-file=target/jacoco.exec

## MAIL
user-ms.mail.connector.type=${MAIL-CONNECTOR-TYPE:default}
user-ms.mail.user-subject-prefix=${MAIL_SUBJECT_PREFIX:${ENV_TARGET:} - }
user-ms.mail.no-reply=${NO_REPLY_MAIL:noreply@areariservata.pagopa.it}

## MAIL SERVER
quarkus.mailer.host=${MAIL_SERVER_HOST:smtp.gmail.com}
quarkus.mailer.port=${MAIL_SERVER_PORT:587}
quarkus.mailer.from=${MAIL_SERVER_USERNAME:}
quarkus.mailer.username=${MAIL_SERVER_USERNAME:}
quarkus.mailer.password=${MAIL_SERVER_PASSWORD:}
quarkus.mailer.auth-methods=${MAIL_SERVER_SMTP_AUTH:LOGIN}
quarkus.mailer.start-tls=${MAIL_SERVER_SMTP_TLS_ENABLE:REQUIRED}
quarkus.mailer.ssl=${MAIL_SERVER_SSL:true}

#SES
user-ms.aws.ses.secret-id=${AWS_SES_ACCESS_KEY_ID:secret-id-example}
user-ms.aws.ses.secret-key=${AWS_SES_SECRET_ACCESS_KEY:secret-key-example}
user-ms.aws.ses.region=${AWS_SES_REGION:eu-south-1}